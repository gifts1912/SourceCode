1. Bellman-Ford
	a. O(VE);
	b. Alogrithm
		// The main function that finds shortest distances from src to
		// all other vertices using Bellman-Ford algorithm.  The function
		// also detects negative weight cycle
		void BellmanFord(struct Graph* graph, int src)
		{
			int V = graph->V;
			int E = graph->E;
			int dist[V];
		 
			// Step 1: Initialize distances from src to all other vertices
			// as INFINITE
			for (int i = 0; i < V; i++)
				dist[i]   = INT_MAX;
			dist[src] = 0;
		 
			// Step 2: Relax all edges |V| - 1 times. A simple shortest 
			// path from src to any other vertex can have at-most |V| - 1 
			// edges
			for (int i = 1; i <= V-1; i++)
			{
				for (int j = 0; j < E; j++)
				{
					int u = graph->edge[j].src;
					int v = graph->edge[j].dest;
					int weight = graph->edge[j].weight;
					if (dist[u] != INT_MAX && dist[u] + weight < dist[v])
						dist[v] = dist[u] + weight;
				}
			}
		 
			// Step 3: check for negative-weight cycles.  The above step 
			// guarantees shortest distances if graph doesn't contain 
			// negative weight cycle.  If we get a shorter path, then there
			// is a cycle.
			for (int i = 0; i < E; i++)
			{
				int u = graph->edge[i].src;
				int v = graph->edge[i].dest;
				int weight = graph->edge[i].weight;
				if (dist[u] != INT_MAX && dist[u] + weight < dist[v])
					printf("Graph contains negative weight cycle");
			}
		 
			printArr(dist, V);
		 
			return;
		}

2. DAG: 
	Used for no cycle graph;
	
	a. O()
	b. Algorithm
		// The function to find shortest paths from given vertex. It uses recursive 
		// topologicalSortUtil() to get topological sorting of given graph.
		void Graph::shortestPath(int s)
		{
			stack<int> Stack;
			int dist[V];
		 
			// Mark all the vertices as not visited
			bool *visited = new bool[V];
			for (int i = 0; i < V; i++)
				visited[i] = false;
		 
			// Call the recursive helper function to store Topological Sort
			// starting from all vertices one by one
			for (int i = 0; i < V; i++)
				if (visited[i] == false)
					topologicalSortUtil(i, visited, Stack);
		 
			// Initialize distances to all vertices as infinite and distance
			// to source as 0
			for (int i = 0; i < V; i++)
				dist[i] = INF;
			dist[s] = 0;
		 
			// Process vertices in topological order
			while (Stack.empty() == false)
			{
				// Get the next vertex from topological order
				int u = Stack.top();
				Stack.pop();
		 
				// Update distances of all adjacent vertices
				list<AdjListNode>::iterator i;
				if (dist[u] != INF)
				{
				  for (i = adj[u].begin(); i != adj[u].end(); ++i)
					 if (dist[i->getV()] > dist[u] + i->getWeight())
						dist[i->getV()] = dist[u] + i->getWeight();
				}
			}
		 
			// Print the calculated shortest distances
			for (int i = 0; i < V; i++)
				(dist[i] == INF)? cout << "INF ": cout << dist[i] << " ";
		}
			
3. Dijstra:
	Used for no negative weight graph;
	a. O(V^2) for metrix represent.O(ELogV) algorithm for adjacency list representation 
	b. Algorithm
	void dijkstra(int graph[V][V], int src)
	{
		 int dist[V];     // The output array.  dist[i] will hold the shortest
						  // distance from src to i
	  
		 bool sptSet[V]; // sptSet[i] will true if vertex i is included in shortest
						 // path tree or shortest distance from src to i is finalized
	  
		 // Initialize all distances as INFINITE and stpSet[] as false
		 for (int i = 0; i < V; i++)
			dist[i] = INT_MAX, sptSet[i] = false;
	  
		 // Distance of source vertex from itself is always 0
		 dist[src] = 0;
	  
		 // Find shortest path for all vertices
		 for (int count = 0; count < V-1; count++)
		 {
		   // Pick the minimum distance vertex from the set of vertices not
		   // yet processed. u is always equal to src in first iteration.
		   int u = minDistance(dist, sptSet);
	  
		   // Mark the picked vertex as processed
		   sptSet[u] = true;
	  
		   // Update dist value of the adjacent vertices of the picked vertex.
		   for (int v = 0; v < V; v++)
	  
			 // Update dist[v] only if is not in sptSet, there is an edge from 
			 // u to v, and total weight of path from src to  v through u is 
			 // smaller than current value of dist[v]
			 if (!sptSet[v] && graph[u][v] && dist[u] != INT_MAX 
										   && dist[u]+graph[u][v] < dist[v])
				dist[v] = dist[u] + graph[u][v];
		 }
	  
		 // print the constructed distance array
		 printSolution(dist, V);
	}
		
	
4. Prim
	a. O(V^2)
	b. Algorithm
		void Prim(){
		int INIFIT = 100000;
		int parent[V];
		int key[V];
		bool mstSet[V];
		for(int i = 0; i < V; i++){
			mstSet[i] = false;
			key[i] = INIFIT;
		}
		key[0] = 0;

		for(int i =0; i < V - 1; i++){
			int u = minEdgeWeight(key, mstSet);
			mstSet[u] = true;
			for(Edge edge : vertices[u].edges){
				int v = edge.dest;
			   if (mstSet[v] == false && key[u] != INIFIT && key[v] > edge.weight) {
					key[v] = edge.weight;
					parent[v] = u;
			   }
			}
		}

	